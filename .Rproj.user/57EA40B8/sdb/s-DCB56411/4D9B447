{
    "collab_server" : "",
    "contents" : "library(shiny)\nlibrary(datasets)\nlibrary(magrittr)\nlibrary(XML)\nlibrary(reshape)\nlibrary(gsheet)\nlibrary(ggplot2)\nlibrary(scales)\n\n# Use the google spreadsheet\njetson <- \"https://docs.google.com/spreadsheets/d/1oPTPmoJ9phtMOkp-nMB7WHnPESomLzqUj9t0gcE9bYA\"\nconflicts <- gsheet2text(jetson, sheetid = 819472314)\nconflicts.long <- read.csv(text=conflicts)\n\narrs <-gsheet2text(jetson, sheetid = 457614883)\narrs.long <- read.csv(text=arrs)\n#arrs.long <- head(arrs.long, -30)\n\ndeps <-gsheet2text(jetson, sheetid = 677621454)\ndeps.long <-read.csv(text=deps)\n#deps.long <- head(deps.long, -30)\n\n\nrain <-gsheet2text(jetson, sheetid = 1473662223)\nrain.long <- read.csv(text=rain,stringsAsFactors = FALSE)\n#rain.long <- head(rain.long, -30)\n\nDates <- sapply(conflicts.long[,1],as.character.Date)\nconflicts.long$Date <- as.Date(conflicts.long$Date, format=\"%m/%d/%Y\")\narrs.long$Date <- as.Date(arrs.long$Date, format=\"%m/%d/%Y\")\ndeps.long$Date <- as.Date(deps.long$Date, format=\"%m/%d/%Y\")\nrain.long$Date <-as.Date(rain.long$Date, format=\"%m.%d.%Y\")\n\n# Force columns to be text\nconflicts.long[,2:ncol(conflicts.long)] <- sapply(conflicts.long[,2:ncol(conflicts.long)], as.numeric)\narrs.long[,2:ncol(arrs.long)] <- sapply(arrs.long[,2:ncol(arrs.long)], as.numeric)\ndeps.long[,2:ncol(deps.long)] <- sapply(deps.long[,2:ncol(deps.long)], as.numeric)\nrain.long[,2:ncol(rain.long)] <- sapply(rain.long[,2:ncol(rain.long)], as.numeric)\n\nbay_arrivals <- function(region, futuremonths){\n  #this section to make the predictions per Region\n  for (t in futuremonths:1){\n    \n    #BAY PREDICTION FOR JULY\n      #output$r0 <- \"Jubbadaa_Hoose\"\n      #Bay_Arrival = 13.436169844673*Jubbada_Hoose_Conflict + 1.16638118095275*Awdal_Departures + \n      #0.861554563637453*Togdheer_Arrival + \n      #6.77121426152958e-7*Awdal_Arrival*Bari_Arrival*delay(Banadir_Departures, 4) - \n      #Gedo_rain - 1.80033045410828e-7*Bari_Arrival*Jubbada_Dhexe_Arrival*delay(Banadir_Departures, 4)\n      \n      PA[t] <- 0\n      \n      # detecting the vars in the dataset.\n      JH_C <- conflicts.long[ (total_len-t),\"Jubbada_Hoose_Conflict\"]\n      A_D <- deps.long[ (total_len-t),\"Awdal_Departures\"]\n      T_A <- arrs.long[ (total_len-t),\"Togdheer_Arrival\"]\n      A_A <- arrs.long[ (total_len-t),\"Awdal_Arrival\"]\n      B_A <- arrs.long[ (total_len-t),\"Bari_Arrival\"]\n      B_D <- deps.long[ (total_len-t-4), \"Banadir_Departures\"]\n      G_R <- rain.long[ (total_len-t),\"Gedo_rain\"]\n      JD_A <- arrs.long[ (total_len-t),\"Jubbada_Dhexe_Arrival\"]\n      #reg\n      JH_C_reg <- 13.436169844673\n      A_D_reg <- 1.16638118095275\n      T_A_reg <- 0.861554563637453\n      exp_reg <- 6.77121426152958e-7\n      B_A_reg <- 1.80033045410828e-7\n      \n      \n      PA[t] <- sum(JH_C_reg *JH_C,A_D_reg* A_D ,T_A_reg*T_A,\n                   exp_reg*A_A*B_A*B_D,-G_R,-B_A_reg*B_A*JD_A*B_D,na.rm = TRUE)\n      #Bay_Incidents\n      PI[t] <- 0\n      #Bay_Departures\n      PD[t] <- 0\n      \n    \n  }\n  \n  PA <- rev(PA)\n  return(PA)\n  \n}\n\nbay_bestfit_arrivals <- function(region, futuremonths){\n  #this section to make the predictions per Region\n  for (t in futuremonths:1){\n    \n    #BAY PREDICTION FOR JULY\n    #output$r0 <- \"Jubbadaa_Hoose\"\n    #Bay_Arrival = 13.436169844673*Jubbada_Hoose_Conflict + 1.16638118095275*Awdal_Departures + \n    #0.861554563637453*Togdheer_Arrival + \n    #6.77121426152958e-7*Awdal_Arrival*Bari_Arrival*delay(Banadir_Departures, 4) - \n    #Gedo_rain - 1.80033045410828e-7*Bari_Arrival*Jubbada_Dhexe_Arrival*delay(Banadir_Departures, 4)\n    \n    PA[t] <- 0\n    \n    # detecting the vars in the dataset.\n    JH_C <- conflicts.long[ (total_len-t),\"Jubbada_Hoose_Conflict\"]\n    A_D <- deps.long[ (total_len-t),\"Awdal_Departures\"]\n    T_A <- arrs.long[ (total_len-t),\"Togdheer_Arrival\"]\n    A_A <- arrs.long[ (total_len-t),\"Awdal_Arrival\"]\n    B_A <- arrs.long[ (total_len-t),\"Bari_Arrival\"]\n    B_D <- deps.long[ (total_len-t-4), \"Banadir_Departures\"]\n    G_R <- rain.long[ (total_len-t),\"Gedo_rain\"]\n    JD_A <- arrs.long[ (total_len-t),\"Jubbada_Dhexe_Arrival\"]\n    #reg\n    JH_C_reg <- 13.436169844673\n    A_D_reg <- 1.16638118095275\n    T_A_reg <- 0.861554563637453\n    exp_reg <- 6.77121426152958e-7\n    B_A_reg <- 1.80033045410828e-7\n    \n    \n    PA[t] <- sum(JH_C_reg *JH_C,A_D_reg* A_D ,T_A_reg*T_A,\n                 exp_reg*A_A*B_A*B_D,-G_R,-B_A_reg*B_A*JD_A*B_D,na.rm = TRUE)\n    #Bay_Incidents\n    PI[t] <- 0\n    #Bay_Departures\n    PD[t] <- 0\n    \n    \n  }\n  \n  PA <- rev(PA)\n  return(PA)\n  \n}\n# Define a server for the Shiny app\n# the ids refer to the google sheet refering to the special identifier\nshinyServer(function(input, output, session) {\n  \n  \n  mydata <- reactive({\n    \n    # prepare columns for the merged graph\n    total_len <- input$months\n    futuremonths <- input$futuremonths\n    region <-input$region\n    #testing values\n    #total_len <- nrow(conflicts.long)\n    #futuredays <- 30 \n    #region <- \"Bay_Conflict\"\n    reg_con <- paste(region,\"Conflict\",sep=\"_\")\n    reg_arr <- paste(region,\"Arrival\",sep=\"_\")\n    reg_dep <- paste(region,\"Departures\",sep=\"_\")\n    reg_rain <- paste(region,\"rain\",sep=\"_\")\n    I <- conflicts.long[ 0:(total_len-1),reg_con]\n    A <- arrs.long[ 0:(total_len-1), reg_arr ]\n    D <- deps.long[ 0:(total_len-1), reg_dep ]\n    \n    long <- data.frame(\n      Period=rep((1:(total_len-1)),3),\n      Date = rev(conflicts.long$Date[1:total_len-1]),\n      Population = c(I, A, D), \n      Indicator=rep(c(\"Incidents\", \n                      \"Arrivals\", \n                      \"Departures\"), \n                    each=(total_len-1)))\n    wide <- cbind(I[(total_len-futuremonths):(total_len-1)], \n                  A[(total_len-futuremonths):(total_len-1)], \n                  D[(total_len-futuremonths):(total_len-1)])\n    list(long=long, wide=wide)\n    \n    \n  })\n  \n  pred_data <- reactive({\n    \n    #days <- input$days\n    futuremonths <- input$futuremonths\n    region <- input$region\n    #testing\n    #futuremonths <- 3\n    #region <- \"Bay_Conflict\"\n    \n    # prepare columns for the merged graph\n    total_len <- nrow(conflicts.long)-1\n    days <- total_len\n    \n    reg_con <- paste(region,\"Conflict\",sep=\"_\")\n    reg_arr <- paste(region,\"Arrival\",sep=\"_\")\n    reg_dep <- paste(region,\"Departures\",sep=\"_\")\n    reg_rain <- paste(region,\"rain\",sep=\"_\")\n    \n    I <- conflicts.long[ (total_len-futuremonths):total_len,reg_con]\n    A <- arrs.long[ (total_len-futuremonths):total_len, reg_arr ]\n    D <- deps.long[ (total_len-futuremonths):total_len, reg_dep ]\n    \n    #AA <- A[(total_len-30):total_len]\n    R <- rain.long[ (total_len-futuremonths):total_len, reg_rain]\n    \n    length <- length(I)\n    PI <- PA <- PD <- rep(NA, futuremonths)\n    \n    \n    if(strsplit(region,  \"_(?=[^_]+$)\",perl=TRUE)[[1]][1] == \"Bay\"){\n      PA <- bay_arrivals(region, futuremonths)\n    }\n    A<- A[1:futuremonths]\n    long <- data.frame(\n      Period=rep((1:futuremonths),3), \n      Date = rev(conflicts.long$Date[nrow(conflicts.long):(nrow(conflicts.long)-futuremonths+1)]),\n      Population = c(A, PA, PD), \n      Indicator=rep(c(\"Arrivals\", \n                      \"Future Arrivals\", \n                      \"Future Departures\"), \n                    each=futuremonths))\n    wide <- cbind(A, PA, PD)\n    list(long=long, wide=wide)\n    \n    \n  })\n  \n  #Create a datatable with all the values from the inputs\n  output$datatable <- renderTable({\n    Tdata <- cbind(pred_data()[[\"wide\"]])\n    Tdata <- cbind(day=1:nrow(Tdata), Tdata)\n    Tdata[seq(1, nrow(Tdata), length.out=9),]\n  })\n  \n  \n  output$graph1 <- renderPlot({\n    \n    long <- mydata()[[\"long\"]]\n    p <- ggplot(long[long$Indicator %in% input$Indicators,], \n                aes(x=Date, y=Population, group=Indicator))    \n    p <- p + \n      geom_line(aes(colour = Indicator), size=1, alpha=.75) + \n      ggtitle(\"All results for all months\")+\n      scale_x_date(name=\"Month\")+ \n      scale_y_continuous(labels = comma, name=\"People\")\n    print(p)\n  })\n  \n  output$graph2 <- renderPlot({\n    \n    long <- pred_data()[[\"long\"]]\n    p <- ggplot(long[long$Indicator %in% input$Future_Indicators,], \n                aes(x=Date, y=Population, group=Indicator))    \n    p <- p + \n      geom_line(aes(colour = Indicator), size=1, alpha=.75) + \n      ggtitle(\"Future Predictions\")+\n      scale_x_date(name=\"Month\")+ \n      scale_y_continuous(labels = comma, name=\"People\")\n    print(p)\n  })\n  \n  }\n\n)\n",
    "created" : 1504986284691.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2530684914",
    "id" : "4D9B447",
    "lastKnownWriteTime" : 1505056733,
    "last_content_update" : 1505056733476,
    "path" : "~/UNHCR/App/MonthlyPredictions/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}