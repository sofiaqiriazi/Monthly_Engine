}
}
A
PA
A <- PI <- PA <- PD <- rep(NA, futuremonths)
for (t in 1:futuremonths){
#BAY PREDICTION FOR JULY
if(strsplit(region,  "_(?=[^_]+$)",perl=TRUE)[[1]][1] == "Bay"){
#output$r0 <- "Jubbadaa_Hoose"
#Bay_Arrival = 13.436169844673*Jubbada_Hoose_Conflict + 1.16638118095275*Awdal_Departures +
#0.861554563637453*Togdheer_Arrival +
#6.77121426152958e-7*Awdal_Arrival*Bari_Arrival*delay(Banadir_Departures, 4) -
#Gedo_rain - 1.80033045410828e-7*Bari_Arrival*Jubbada_Dhexe_Arrival*delay(Banadir_Departures, 4)
PA[t] <- 0
# detecting the vars in the dataset.
JH_C <- conflicts.long[ (total_len-t),"Jubbada_Hoose_Conflict"]
A_D <- deps.long[ (total_len-t),"Awdal_Departures"]
T_A <- arrs.long[ (total_len-t),"Togdheer_Arrival"]
A_A <- arrs.long[ (total_len-t),"Awdal_Arrival"]
B_A <- arrs.long[ (total_len-t),"Bari_Arrival"]
B_D <- deps.long[ (total_len-t-4), "Banadir_Departures"]
G_R <- rain.long[ (total_len-t),"Gedo_rain"]
JD_A <- arrs.long[ (total_len-t),"Jubbada_Dhexe_Arrival"]
#reg
JH_C_reg <- 13.436169844673
A_D_reg <- 1.16638118095275
T_A_reg <- 0.861554563637453
exp_reg <- 6.77121426152958e-7
B_A_reg <- 1.80033045410828e-7
A[t] <-
PA[t] <- sum(JH_C_reg *JH_C,A_D_reg* A_D ,T_A_reg*T_A,
exp_reg*A_A*B_A*B_D,-G_R,-B_A_reg*B_A*JD_A*B_D,na.rm = TRUE)
#Bay_Incidents
PI[t] <- 0
#Bay_Departures
PD[t] <- 0
}
}
pa
PA
A <- PI <- PA <- PD <- rep(NA, futuremonths)
for (t in futuremonths:1){
#BAY PREDICTION FOR JULY
if(strsplit(region,  "_(?=[^_]+$)",perl=TRUE)[[1]][1] == "Bay"){
#output$r0 <- "Jubbadaa_Hoose"
#Bay_Arrival = 13.436169844673*Jubbada_Hoose_Conflict + 1.16638118095275*Awdal_Departures +
#0.861554563637453*Togdheer_Arrival +
#6.77121426152958e-7*Awdal_Arrival*Bari_Arrival*delay(Banadir_Departures, 4) -
#Gedo_rain - 1.80033045410828e-7*Bari_Arrival*Jubbada_Dhexe_Arrival*delay(Banadir_Departures, 4)
PA[t] <- 0
# detecting the vars in the dataset.
JH_C <- conflicts.long[ (total_len-t),"Jubbada_Hoose_Conflict"]
A_D <- deps.long[ (total_len-t),"Awdal_Departures"]
T_A <- arrs.long[ (total_len-t),"Togdheer_Arrival"]
A_A <- arrs.long[ (total_len-t),"Awdal_Arrival"]
B_A <- arrs.long[ (total_len-t),"Bari_Arrival"]
B_D <- deps.long[ (total_len-t-4), "Banadir_Departures"]
G_R <- rain.long[ (total_len-t),"Gedo_rain"]
JD_A <- arrs.long[ (total_len-t),"Jubbada_Dhexe_Arrival"]
#reg
JH_C_reg <- 13.436169844673
A_D_reg <- 1.16638118095275
T_A_reg <- 0.861554563637453
exp_reg <- 6.77121426152958e-7
B_A_reg <- 1.80033045410828e-7
A[t] <-
PA[t] <- sum(JH_C_reg *JH_C,A_D_reg* A_D ,T_A_reg*T_A,
exp_reg*A_A*B_A*B_D,-G_R,-B_A_reg*B_A*JD_A*B_D,na.rm = TRUE)
#Bay_Incidents
PI[t] <- 0
#Bay_Departures
PD[t] <- 0
}
}
{A}
PA
A <- arrs.long[ (total_len-futuremonths):total_len, reg_arr ]
A
rev(PA)
A<- A[1:futuremonths]
A
PA<- rev(PA)
A<- A[1:futuremonths]
long <- data.frame(
Period=rep((1:futuremonths),3),
Population = c(A, PA, PD),
Indicator=rep(c("Arrivals",
"Future Arrivals",
"Future Departures"),
each=futuremonths))
wide <- cbind(A, PA, PD)
list(long=long, wide=wide)
runApp()
futuremonths <- input$futuremonths
region <- input$region
futuremonths <- 3
region <- "Bay_Conflict"
total_len <- nrow(conflicts.long)-1
days <- total_len
reg_arr <- paste(strsplit(region, "_(?=[^_]+$)",perl=TRUE)[[1]][1],"Arrival",sep="_")
reg_dep <- paste(strsplit(region, "_(?=[^_]+$)",perl=TRUE)[[1]][1],"Departures",sep="_")
reg_rain <- paste(strsplit(region, "_(?=[^_]+$)",perl=TRUE)[[1]][1],"rain",sep="_")
I <- conflicts.long[ (total_len-futuremonths):total_len,region]
A <- arrs.long[ (total_len-futuremonths):total_len, reg_arr ]
D <- deps.long[ (total_len-futuremonths):total_len, reg_dep ]
R <- rain.long[ (total_len-futuremonths):total_len, reg_rain]
length <- length(I)
A <- PI <- PA <- PD <- rep(NA, futuremonths)
for (t in futuremonths:1){
#BAY PREDICTION FOR JULY
if(strsplit(region,  "_(?=[^_]+$)",perl=TRUE)[[1]][1] == "Bay"){
#output$r0 <- "Jubbadaa_Hoose"
#Bay_Arrival = 13.436169844673*Jubbada_Hoose_Conflict + 1.16638118095275*Awdal_Departures +
#0.861554563637453*Togdheer_Arrival +
#6.77121426152958e-7*Awdal_Arrival*Bari_Arrival*delay(Banadir_Departures, 4) -
#Gedo_rain - 1.80033045410828e-7*Bari_Arrival*Jubbada_Dhexe_Arrival*delay(Banadir_Departures, 4)
PA[t] <- 0
# detecting the vars in the dataset.
JH_C <- conflicts.long[ (total_len-t),"Jubbada_Hoose_Conflict"]
A_D <- deps.long[ (total_len-t),"Awdal_Departures"]
T_A <- arrs.long[ (total_len-t),"Togdheer_Arrival"]
A_A <- arrs.long[ (total_len-t),"Awdal_Arrival"]
B_A <- arrs.long[ (total_len-t),"Bari_Arrival"]
B_D <- deps.long[ (total_len-t-4), "Banadir_Departures"]
G_R <- rain.long[ (total_len-t),"Gedo_rain"]
JD_A <- arrs.long[ (total_len-t),"Jubbada_Dhexe_Arrival"]
#reg
JH_C_reg <- 13.436169844673
A_D_reg <- 1.16638118095275
T_A_reg <- 0.861554563637453
exp_reg <- 6.77121426152958e-7
B_A_reg <- 1.80033045410828e-7
A[t] <-
PA[t] <- sum(JH_C_reg *JH_C,A_D_reg* A_D ,T_A_reg*T_A,
exp_reg*A_A*B_A*B_D,-G_R,-B_A_reg*B_A*JD_A*B_D,na.rm = TRUE)
#Bay_Incidents
PI[t] <- 0
#Bay_Departures
PD[t] <- 0
}
}
A<- A[1:futuremonths]
long <- data.frame(
Period=rep((1:futuremonths),3),
Population = c(A, PA, PD),
Indicator=rep(c("Arrivals",
"Future Arrivals",
"Future Departures"),
each=futuremonths))
wide <- cbind(A, PA, PD)
list(long=long, wide=wide)
for (t in futuremonths:1){
#BAY PREDICTION FOR JULY
if(strsplit(region,  "_(?=[^_]+$)",perl=TRUE)[[1]][1] == "Bay"){
#output$r0 <- "Jubbadaa_Hoose"
#Bay_Arrival = 13.436169844673*Jubbada_Hoose_Conflict + 1.16638118095275*Awdal_Departures +
#0.861554563637453*Togdheer_Arrival +
#6.77121426152958e-7*Awdal_Arrival*Bari_Arrival*delay(Banadir_Departures, 4) -
#Gedo_rain - 1.80033045410828e-7*Bari_Arrival*Jubbada_Dhexe_Arrival*delay(Banadir_Departures, 4)
PA[t] <- 0
# detecting the vars in the dataset.
JH_C <- conflicts.long[ (total_len-t),"Jubbada_Hoose_Conflict"]
A_D <- deps.long[ (total_len-t),"Awdal_Departures"]
T_A <- arrs.long[ (total_len-t),"Togdheer_Arrival"]
A_A <- arrs.long[ (total_len-t),"Awdal_Arrival"]
B_A <- arrs.long[ (total_len-t),"Bari_Arrival"]
B_D <- deps.long[ (total_len-t-4), "Banadir_Departures"]
G_R <- rain.long[ (total_len-t),"Gedo_rain"]
JD_A <- arrs.long[ (total_len-t),"Jubbada_Dhexe_Arrival"]
#reg
JH_C_reg <- 13.436169844673
A_D_reg <- 1.16638118095275
T_A_reg <- 0.861554563637453
exp_reg <- 6.77121426152958e-7
B_A_reg <- 1.80033045410828e-7
PA[t] <- sum(JH_C_reg *JH_C,A_D_reg* A_D ,T_A_reg*T_A,
exp_reg*A_A*B_A*B_D,-G_R,-B_A_reg*B_A*JD_A*B_D,na.rm = TRUE)
#Bay_Incidents
PI[t] <- 0
#Bay_Departures
PD[t] <- 0
}
}
A<- A[1:futuremonths]
long <- data.frame(
Period=rep((1:futuremonths),3),
Population = c(A, PA, PD),
Indicator=rep(c("Arrivals",
"Future Arrivals",
"Future Departures"),
each=futuremonths))
wide <- cbind(A, PA, PD)
list(long=long, wide=wide)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
jetson <- "https://docs.google.com/spreadsheets/d/1oPTPmoJ9phtMOkp-nMB7WHnPESomLzqUj9t0gcE9bYA"
conflicts <- gsheet2text(jetson, sheetid = 819472314)
conflicts.long <- read.csv(text=conflicts)
arrs <-gsheet2text(jetson, sheetid = 457614883)
arrs.long <- read.csv(text=arrs)
deps <-gsheet2text(jetson, sheetid = 677621454)
deps.long <-read.csv(text=deps)
rain <-gsheet2text(jetson, sheetid = 1473662223)
rain.long <- read.csv(text=rain,stringsAsFactors = FALSE)
Dates <- sapply(conflicts.long[,1],as.character.Date)
conflicts.long$Date <- as.Date(conflicts.long$Date, format="%m/%d/%Y")
conflicts.long$Date
conflicts.long$Date[1:3]
conflicts.long$Date[nrow(conflicts.long):(nrow(conflicts.long)-3)]
conflicts.long$Date[nrow(conflicts.long):(nrow(conflicts.long)-4)]
conflicts.long$Date[nrow(conflicts.long):(nrow(conflicts.long)-2)]
conflicts.long$Date[nrow(conflicts.long):(nrow(conflicts.long)-futuremonths+1)]
runApp()
runApp()
runApp()
colnames(strsplit(conflicts.long[odd_indexes],  "_(?=[^_]+$)",perl=TRUE)[[1]][1])
odd_indexes<-seq(2,19,1)
odd_indexes<-seq(2,19,1)
colnames(strsplit(conflicts.long[odd_indexes],  "_(?=[^_]+$)",perl=TRUE)[[1]][1])
strsplit(colnames(conflicts.long[odd_indexes],  "_(?=[^_]+$)",perl=TRUE)[[1]][1]), selected = "Bay")
strsplit((colnames(conflicts.long[odd_indexes]),  "_(?=[^_]+$)",perl=TRUE)[[1]][1]), selected = "Bay")
shinyUI(
# Use a fluid Bootstrap layout
fluidPage(
tags$head(
tags$link(rel = "stylesheet", type = "text/css", href = "style.css"),
tags$script(src="main.js")
),
# Give the page a title
titlePanel("Predictive Engine"),
# Generate a row with a sidebar
sidebarLayout(
# Define the sidebar with one input
sidebarPanel(
selectInput("region", "Region:",
choices=strsplit(colnames(conflicts.long[odd_indexes]),,  "_(?=[^_]+$)",perl=TRUE)[[1]][1], selected = "Bay"),
sliderInput("months", "Months", min = 1, max = nrow(conflicts.long)-1,
value = 90, step = 10, round = 0),
hr(),
sliderInput("futuremonths", "Months to Predict", min = 3, max = 89,
value = 3, step = 1, round = 0),
sliderInput("futureconflict", "Average number of Conflicts", min = 1, max = 1000000,
value = 10, step = 100, round = 0),
hr(),
helpText("According to the selected Region(BAY) the model is affected by the following parameters:"),
sliderInput("var1", "r0", min = 1, max = 1000000,
value = 10, step = 100, round = 0),
helpText("Data from Innovation Jetson Google Sheet"),
tableOutput("datatable")
),
# Create a spot for the barplot
mainPanel(
checkboxGroupInput("Future_Indicators", "",
c("Arrivals",
"Future Arrivals",
"Future Departures"),
selected=c(
"Arrivals",
"Future Arrivals",
"Future Departures"),
inline=TRUE),
plotOutput("graph2"),
checkboxGroupInput("Indicators", "",
c("Incidents",
"Arrivals",
"Departures"),
selected=c(
"Incidents",
"Arrivals",
"Departures"),
inline=TRUE),
plotOutput("graph1")
#plotOutput("IncidentPlot"),
#plotOutput("ArrivalsPlot"),
#plotOutput("DeparturesPlot")
)
)
)
)
strsplit(colnames(conflicts.long[odd_indexes]),,  "_(?=[^_]+$)",perl=TRUE)[[1]][1]
strsplit(colnames(conflicts.long[odd_indexes]),"_(?=[^_]+$)",perl=TRUE)[[1]][1]
strsplit(colnames(conflicts.long[odd_indexes]),"_(?=[^_]+$)",perl=TRUE)[[1]]
strsplit(colnames(conflicts.long[odd_indexes]),"_(?=[^_]+$)",perl=TRUE)[[]][1]
strsplit(colnames(conflicts.long[odd_indexes]),"_(?=[^_]+$)",perl=TRUE)[[]][]
strsplit(colnames(conflicts.long[odd_indexes]),"_(?=[^_]+$)",perl=TRUE)[[1]][1]
runApp()
strsplit(colnames(conflicts.long[odd_indexes]),"_(?=[^_]+$)",perl=TRUE)
strsplit(colnames(conflicts.long[odd_indexes]),"_(?=[^_]+$)",perl=TRUE)[[1]]
strsplit(colnames(conflicts.long[odd_indexes]),"_(?=[^_]+$)",perl=TRUE)[1]
strsplit(colnames(conflicts.long[odd_indexes]),"_(?=[^_]+$)",perl=TRUE)
strsplit(colnames(conflicts.long[odd_indexes]),"_(?=[^_]+$)",perl=TRUE)[[odd_indexes]][1]
strsplit(colnames(conflicts.long[odd_indexes]),"_(?=[^_]+$)",perl=TRUE)[[1]][odd_indexes]
strsplit(colnames(conflicts.long[odd_indexes]),"_(?=[^_]+$)",perl=TRUE)[[2]][odd_indexes]
strsplit(colnames(conflicts.long[odd_indexes]),"_(?=[^_]+$)",perl=TRUE)[[3]][odd_indexes]
strsplit(colnames(conflicts.long[odd_indexes]),"_(?=[^_]+$)",perl=TRUE)[[odd_indexes]]
strsplit(colnames(conflicts.long[odd_indexes]),"_(?=[^_]+$)",perl=TRUE)[[1]]
strsplit(colnames(conflicts.long[odd_indexes]),"_(?=[^_]+$)",perl=TRUE)[[2]]
strsplit(colnames(conflicts.long[odd_indexes]),"_(?=[^_]+$)",perl=TRUE)[[odd_indexes]]
strsplit(colnames(conflicts.long[odd_indexes]),"_(?=[^_]+$)",perl=TRUE)[[1:19]]
strsplit(colnames(conflicts.long[odd_indexes]),"_(?=[^_]+$)",perl=TRUE)[[]]
strsplit(colnames(conflicts.long[odd_indexes]),"_(?=[^_]+$)",perl=TRUE)
shinyUI(
# Use a fluid Bootstrap layout
fluidPage(
tags$head(
tags$link(rel = "stylesheet", type = "text/css", href = "style.css"),
tags$script(src="main.js")
),
# Give the page a title
titlePanel("Predictive Engine"),
# Generate a row with a sidebar
sidebarLayout(
# Define the sidebar with one input
sidebarPanel(
selectInput("region", "Region:",
choices=strsplit(colnames(conflicts.long[odd_indexes]),"_(?=[^_]+$)",perl=TRUE), selected = "Bay"),
sliderInput("months", "Months", min = 1, max = nrow(conflicts.long)-1,
value = 90, step = 10, round = 0),
hr(),
sliderInput("futuremonths", "Months to Predict", min = 3, max = 89,
value = 3, step = 1, round = 0),
sliderInput("futureconflict", "Average number of Conflicts", min = 1, max = 1000000,
value = 10, step = 100, round = 0),
hr(),
helpText("According to the selected Region(BAY) the model is affected by the following parameters:"),
sliderInput("var1", "r0", min = 1, max = 1000000,
value = 10, step = 100, round = 0),
helpText("Data from Innovation Jetson Google Sheet"),
tableOutput("datatable")
),
# Create a spot for the barplot
mainPanel(
checkboxGroupInput("Future_Indicators", "",
c("Arrivals",
"Future Arrivals",
"Future Departures"),
selected=c(
"Arrivals",
"Future Arrivals",
"Future Departures"),
inline=TRUE),
plotOutput("graph2"),
checkboxGroupInput("Indicators", "",
c("Incidents",
"Arrivals",
"Departures"),
selected=c(
"Incidents",
"Arrivals",
"Departures"),
inline=TRUE),
plotOutput("graph1")
#plotOutput("IncidentPlot"),
#plotOutput("ArrivalsPlot"),
#plotOutput("DeparturesPlot")
)
)
)
)
runApp()
strsplit(colnames(conflicts.long[odd_indexes]),"_(?=[^_]+$)",perl=TRUE)
a<-strsplit(colnames(conflicts.long[odd_indexes]),"_(?=[^_]+$)",perl=TRUE)
a
a<-strsplit(colnames(conflicts.long[odd_indexes]),"_(?=[^_]+$)",perl=TRUE)[1]
a
a<-strsplit(colnames(conflicts.long[odd_indexes]),"_(?=[^_]+$)",perl=TRUE)[1][odd_indexes]
a
a<-strsplit(colnames(conflicts.long[odd_indexes]),"_(?=[^_]+$)",perl=TRUE)[0][odd_indexes]
a
a<-strsplit(colnames(conflicts.long[odd_indexes]),"_(?=[^_]+$)",perl=TRUE)[odd_indexes]
a
a<-strsplit(colnames(conflicts.long[odd_indexes]),"_(?=[^_]+$)",perl=TRUE)[odd_indexes][1]
a
a<-strsplit(colnames(conflicts.long[odd_indexes]),"_(?=[^_]+$)",perl=TRUE)[1]
a
a<-strsplit(colnames(conflicts.long[odd_indexes]),"_(?=[^_]+$)",perl=TRUE)
a
a
typeof(a)
a
a[1]
a[odd_indexes]
a[odd_indexes]
a<-strsplit(colnames(conflicts.long[odd_indexes]),"_(?=[^_]+$)",perl=TRUE)
a
a[odd_indexes]
a
a[odd_indexes]
odd_indexes<-seq(1,19,1)
a<-strsplit(colnames(conflicts.long[odd_indexes]),"_(?=[^_]+$)",perl=TRUE)
a
a<-strsplit(colnames(conflicts.long[odd_indexes]),"_(?=[^_]+$)",perl=TRUE)
a
a[1:19]
a[2:19][1]
a[2:19][][odd_indexes]
a
a[1]
typeof(a[1])
typeof(a[2])
typeof(a[2][1])
a[2][1]
a[2][1][1]
a[2][1][[1]]
a[2][1]
typeof(a[2][1])
typeof(a[odd_indexes][1])
a[odd_indexes[2:19]][1]
a[odd_indexes[2:19][1]
a
a[2:19][1]
odd_indexes<-seq(2,19,1)
regions  <- conflicts.long[odd_indexes]
regions  <- colnames(conflicts.long[odd_indexes])
odd_indexes<-seq(2,19,1)
regions  <- colnames(conflicts.long[odd_indexes])
regions <- strsplit(regions,  "_(?=[^_]+$)",perl=TRUE)[[1]][1]
regions
regions <- strsplit(regions,  "_(?=[^_]+$)",perl=TRUE)[[1]]
regions
regions <- strsplit(regions,  "_(?=[^_]+$)",perl=TRUE)
regions
regions <- strsplit(regions[:],  "_(?=[^_]+$)",perl=TRUE)
regions <- strsplit(regions[1:18],  "_(?=[^_]+$)",perl=TRUE)
regions <- strsplit(regions,  "_(?=[^_]+$)",perl=TRUE)
regions <- colnames(conflicts.long[odd_indexes])
for (i in 1:18){
list_regs[i] <- strsplit(regions[i],  "_(?=[^_]+$)",perl=TRUE)[[1]][1]
}
list_regs <- rep(NA,18)
for (i in 1:18){
list_regs[i] <- strsplit(regions[i],  "_(?=[^_]+$)",perl=TRUE)[[1]][1]
}
runApp()
reg_conf <- paste(region,"Conflict",sep="_")
reg_arr <- paste(region,"Arrival",sep="_")
runApp()
runApp()
library(shiny)
library(datasets)
library(magrittr)
library(XML)
library(reshape)
library(gsheet)
library(ggplot2)
library(scales)
library(shiny)
library(datasets)
library(magrittr)
library(XML)
library(reshape)
library(gsheet)
library(ggplot2)
library(scales)
jetson <- "https://docs.google.com/spreadsheets/d/1oPTPmoJ9phtMOkp-nMB7WHnPESomLzqUj9t0gcE9bYA"
conflicts <- gsheet2text(jetson, sheetid = 819472314)
conflicts.long <- read.csv(text=conflicts)
arrs <-gsheet2text(jetson, sheetid = 457614883)
arrs.long <- read.csv(text=arrs)
deps <-gsheet2text(jetson, sheetid = 677621454)
deps.long <-read.csv(text=deps)
rain <-gsheet2text(jetson, sheetid = 1473662223)
rain.long <- read.csv(text=rain,stringsAsFactors = FALSE)
Dates <- sapply(conflicts.long[,1],as.character.Date)
conflicts.long$Date <- as.Date(conflicts.long$Date, format="%m/%d/%Y")
arrs.long$Date <- as.Date(arrs.long$Date, format="%m/%d/%Y")
deps.long$Date <- as.Date(deps.long$Date, format="%m/%d/%Y")
rain.long$Date <-as.Date(rain.long$Date, format="%m.%d.%Y")
conflicts.long[,2:ncol(conflicts.long)] <- sapply(conflicts.long[,2:ncol(conflicts.long)], as.numeric)
arrs.long[,2:ncol(arrs.long)] <- sapply(arrs.long[,2:ncol(arrs.long)], as.numeric)
deps.long[,2:ncol(deps.long)] <- sapply(deps.long[,2:ncol(deps.long)], as.numeric)
rain.long[,2:ncol(rain.long)] <- sapply(rain.long[,2:ncol(rain.long)], as.numeric)
bay_arrivals <- function(region, futuremonths){
#this section to make the predictions per Region
for (t in futuremonths:1){
#BAY PREDICTION FOR JULY
#output$r0 <- "Jubbadaa_Hoose"
#Bay_Arrival = 13.436169844673*Jubbada_Hoose_Conflict + 1.16638118095275*Awdal_Departures +
#0.861554563637453*Togdheer_Arrival +
#6.77121426152958e-7*Awdal_Arrival*Bari_Arrival*delay(Banadir_Departures, 4) -
#Gedo_rain - 1.80033045410828e-7*Bari_Arrival*Jubbada_Dhexe_Arrival*delay(Banadir_Departures, 4)
PA[t] <- 0
# detecting the vars in the dataset.
JH_C <- conflicts.long[ (total_len-t),"Jubbada_Hoose_Conflict"]
A_D <- deps.long[ (total_len-t),"Awdal_Departures"]
T_A <- arrs.long[ (total_len-t),"Togdheer_Arrival"]
A_A <- arrs.long[ (total_len-t),"Awdal_Arrival"]
B_A <- arrs.long[ (total_len-t),"Bari_Arrival"]
B_D <- deps.long[ (total_len-t-4), "Banadir_Departures"]
G_R <- rain.long[ (total_len-t),"Gedo_rain"]
JD_A <- arrs.long[ (total_len-t),"Jubbada_Dhexe_Arrival"]
#reg
JH_C_reg <- 13.436169844673
A_D_reg <- 1.16638118095275
T_A_reg <- 0.861554563637453
exp_reg <- 6.77121426152958e-7
B_A_reg <- 1.80033045410828e-7
PA[t] <- sum(JH_C_reg *JH_C,A_D_reg* A_D ,T_A_reg*T_A,
exp_reg*A_A*B_A*B_D,-G_R,-B_A_reg*B_A*JD_A*B_D,na.rm = TRUE)
#Bay_Incidents
PI[t] <- 0
#Bay_Departures
PD[t] <- 0
}
PA <- rev(PA)
return(PA)
}
